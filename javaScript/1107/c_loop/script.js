// 자바스크립트의 반복문

/**
 * ! 반복문(Loops)
 * : 동일한 코드 블록을 여러 번 실행할 수 있도록 해주는 프로그래밍의 기본 구조
 * : 조건이 만족될 때까지 반복하여 실행할 수 있는 명령의 집합
 *
 * 종류
 * : for, while, do-while
 *
 * 배열
 * : 여러 개의 변수를 한 번에 선언해서 다룰 수 있는 자료형
 * : 여러 개의 항목들이 순차적으로 저장된 데이터 구조
 * : JS 에서 배열은 Array 객체
 * : 숫자형 인텍스를 사용해 각 항목에 접근 가능
 *
 * 요소: 배열 내부에 있는 값
 * 인덱스 번호: 0부터 시작
 * (인텍스의 끝 번호 === 배열 길이 - 1)
 */

let fruits = ['apple', 'banana', 'cherry'];
console.log(fruits[0]); // 'apple'

// ? 배열 길이 확인 메서드: length
console.log(fruits.length); // 3

/**
 * ! for 반복문
 *
 * - 기본 구조
 *   for (초기화 식; 종료 조건; 증감식) {
 *     실행할 코드
 *   }
 *
 *   * 초기화식(Initialization)
 *     : 반복문이 시작될 때 단 한 번만 실행
 *     : 보통 카운터 변수라고도 불림
 *     : 카운터 변수를 초기화 하는데 사용
 *     : 보통 숫자로 설정된 변수
 *   * 종료조건(test / condition)
 *     : 각 반복 사이클의 시작에서 평가되는 표현식
 *     : 해당 조건이 true면 코드 블록이 실행
 *     : false면 반복문이 종료
 *   * 증감식
 *     : 각 반복 사이클이 끝날 때(반복문이 전체 반복을 거쳤을 때) 마다 실행
 *     : 일반적으로 카운터 변수를 증가 또는 감소 시키는데 사용
 */

// 0부터 4까지의 숫자(정수)를 콘솔창에 출력
console.log(`0-4 출력`);
for (let idx = 0; idx < 5; idx++) {
  console.log(idx);
}

/**
 * while문
 * : 주어진 조건이 참인 동안 코드 블럭을 계속 실행
 *
 * while 반복문의 기본적인 구조
 * while (조건) {
 *   실행할 코드
 * }
 */
let index = 0;
while (index < 5) {
  console.log(index);
  index++;
}

/**
 * do-while문
 * : while 반복문과 유사
 * : 조건을 확인하기 전에 먼저 코드 블록을 실행
 * : 코드 블록이 최소한 한 번은 실행 보장
 *
 * 기본 구조
 * do {
 *   // 실행할 코드
 * } while (조건);
 */

index = 0;
do {
  console.log(index);
  index++;
} while (index < 5);

// 1에서 20까지의 숫자 중에서 3의 배수만 출력
// for 반복문 사용
console.log('반복분 & 조건문');
for (let i = 1; i <= 20; i++) {
  if (i % 3 === 0) {
    console.log(i);
  }
}
